{"version":3,"sources":["ProductCard.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","container","display","gridTemplateColumns","gridTemplateRows","gridGap","root","maxWidth","maxHeight","boxShadow","transition","transform","media","height","ProductCard","product","classes","Grid","className","Products","map","Card","Link","href","CardMedia","image","title","CardContent","name","Typography","description","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6uDAIMA,EAAYC,YAAW,CACzBC,UAAW,CACPC,QAAS,OACTC,oBAAqB,sBACrBC,iBAAkB,YAClBC,QAAS,SAEbC,KAAM,CACJC,SAAU,IACVC,UAAW,IACXC,UAAW,uBACX,UAAW,CACTC,WAAY,gBACZC,UAAW,eAGfC,MAAO,CACLC,OAAQ,OAIC,SAASC,EAAYC,GAEhC,IAAMC,EAAUjB,IAEhB,OACI,kBAACkB,EAAA,EAAD,CAAMC,UAAWF,EAAQf,WACpBkB,EAASC,KAAI,SAACL,GAAD,OACV,kBAACM,EAAA,EAAD,CAAMH,UAAWF,EAAQV,MACrB,kBAACgB,EAAA,EAAD,CAAMC,KAAK,kBACX,kBAACC,EAAA,EAAD,CACIN,UAAWF,EAAQJ,MACnBa,MAAOV,EAAQU,MACfC,MAAM,eAEV,kBAACC,EAAA,EAAD,KACKZ,EAAQa,KACL,kBAACC,EAAA,EAAD,KACKd,EAAQe,oBC5B1BC,MAVf,WACE,OACE,yBAAKb,UAAU,OACb,4BAAQA,UAAU,cAClB,kBAACJ,EAAD,SCIckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.418ca8dc.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card, CardMedia, CardContent, Typography, makeStyles, Link, Grid } from '@material-ui/core';\r\nimport Products from './pacelabace.json';\r\n\r\nconst useStyles = makeStyles({\r\n    container: {\r\n        display: 'grid',\r\n        gridTemplateColumns: 'auto auto auto auto',\r\n        gridTemplateRows: 'auto auto',\r\n        gridGap: \"100px\",\r\n    },\r\n    root: {\r\n      maxWidth: 250,\r\n      maxHeight: 300,\r\n      boxShadow: '5px 5px 7px 7px gray',\r\n      '&:hover': {\r\n        transition: 'transform .2s',\r\n        transform: 'scale(1.2)',\r\n     }\r\n    },\r\n    media: {\r\n      height: 140,\r\n    },\r\n  });\r\n\r\nexport default function ProductCard(product) {\r\n    \r\n    const classes = useStyles();\r\n\r\n    return(\r\n        <Grid className={classes.container}>  \r\n            {Products.map((product) => (                \r\n                <Card className={classes.root}>\r\n                    <Link href=\"www.google.com\">\r\n                    <CardMedia\r\n                        className={classes.media}\r\n                        image={product.image}\r\n                        title=\"Image Card\"\r\n                    />\r\n                    <CardContent>\r\n                        {product.name}\r\n                            <Typography>\r\n                                {product.description}\r\n                            </Typography>\r\n                    </CardContent>\r\n                    </Link>\r\n                </Card>\r\n            ))}\r\n        </Grid>\r\n    )   \r\n}","import React from 'react';\r\nimport './App.css';\r\nimport ProductCard from './ProductCard.js';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n      <ProductCard />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}